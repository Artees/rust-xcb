initSidebarItems({"constant":[["COPY_FROM_PARENT",""],["CURRENT_TIME",""],["NONE",""],["NO_SYMBOL",""]],"fn":[["cast_error","Casts the generic error to the right error. Assumes that the given errir is really the correct type."],["cast_event","Casts the generic event to the right event. Assumes that the given event is really the correct type."],["pack_bitfield",""]],"struct":[["Connection","wraps an `xcb_connection_t` object will call `xcb_disconnect` when the `Connection` goes out of scope"],["Cookie","wraps a cookie as returned by a request function instantiation of `Cookie` that are not `VoidCookie` should provide a `get_reply` method to return a `Reply`"],["Error","`Error` wraps a pointer to `xcb_*_error_t` this pointer will be freed when the `Error` goes out of scope"],["Event","`Event` wraps a pointer to `xcb_*_event_t` this pointer will be freed when the `Event` goes out of scope"],["QueryExtensionData",""],["Reply","Wraps a pointer to a `xcb_*_reply_t` the pointer is freed when the `Reply` goes out of scope"],["StructPtr","`StructPtr` is a wrapper for pointer to struct owned by XCB that must not be freed it is instead bound to the lifetime of its parent that it borrows immutably"]],"trait":[["Zero",""]],"type":[["AuthInfo",""],["Extension",""],["GenericError",""],["GenericEvent",""],["GenericReply",""],["VoidCookie",""]]});